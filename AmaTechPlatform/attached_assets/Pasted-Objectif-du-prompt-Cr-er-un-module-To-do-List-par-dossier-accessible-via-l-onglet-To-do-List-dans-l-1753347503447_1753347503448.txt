Objectif du prompt
Cr√©er un module To-do List par dossier, accessible via l‚Äôonglet To-do List dans le menu lat√©ral.
Il s‚Äôagit de g√©rer des t√¢ches internes associ√©es √† ce mandat M&A sp√©cifique, avec une interface simple et efficace.

üîß Prompt Replit
tsx
Copier
Modifier
// üìÅ ToDoList.tsx (React component for a per-project task list)
// Tech: React + Tailwind CSS + Zustand for state management (or Firebase for storage)

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Calendar } from "@/components/ui/calendar";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

interface Task {
  id: string;
  title: string;
  description?: string;
  dueDate?: string;
  assignedTo?: string;
  done: boolean;
}

export default function ToDoList({ projectId }) {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState("");
  const [dueDate, setDueDate] = useState<string | null>(null);
  const [assignedTo, setAssignedTo] = useState("");

  function addTask() {
    if (!newTask) return;
    const task: Task = {
      id: crypto.randomUUID(),
      title: newTask,
      dueDate: dueDate ?? undefined,
      assignedTo,
      done: false,
    };
    setTasks([...tasks, task]);
    setNewTask("");
    setDueDate(null);
    setAssignedTo("");
  }

  function toggleDone(id: string) {
    setTasks(
      tasks.map((t) => (t.id === id ? { ...t, done: !t.done } : t))
    );
  }

  function removeTask(id: string) {
    setTasks(tasks.filter((t) => t.id !== id));
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">To-do List</h2>

      <div className="flex flex-col gap-2 border rounded-lg p-4 bg-muted">
        <Input
          placeholder="Nouvelle t√¢che‚Ä¶"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
        />
        <div className="flex gap-4">
          <Calendar
            mode="single"
            selected={dueDate ? new Date(dueDate) : undefined}
            onSelect={(date) => setDueDate(date?.toISOString().split("T")[0] ?? null)}
          />
          <Input
            placeholder="Attribuer √†‚Ä¶"
            value={assignedTo}
            onChange={(e) => setAssignedTo(e.target.value)}
          />
          <Button onClick={addTask}>Ajouter</Button>
        </div>
      </div>

      <div className="space-y-2">
        {tasks.map((task) => (
          <div key={task.id} className="flex items-start justify-between border p-3 rounded-md bg-white shadow-sm">
            <div className="flex items-start gap-3">
              <Checkbox
                checked={task.done}
                onCheckedChange={() => toggleDone(task.id)}
              />
              <div>
                <div className="font-medium">{task.title}</div>
                <div className="text-sm text-muted-foreground">
                  {task.dueDate && `√âch√©ance : ${task.dueDate} `} 
                  {task.assignedTo && `¬∑ Assign√© √† : ${task.assignedTo}`}
                </div>
              </div>
            </div>
            <Button variant="ghost" onClick={() => removeTask(task.id)}>
              Supprimer
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
}
üß© Stockage (optionnel selon ton avancement)
Tu peux brancher le setTasks sur :

soit du Zustand local si tu veux avancer vite,

soit un document Firebase li√© au projet {projectId}/todoList,

soit une simple API Node.js si tu pr√©f√®res contr√¥ler le backend.

üß† √âvolutions pr√©vues plus tard
Filtres : par √©ch√©ance, par responsable, par statut

Int√©gration √† la dashboard "Relances √† faire"

Notification deadline imminente

Lien avec d'autres blocs (ex: roadshow, process update)